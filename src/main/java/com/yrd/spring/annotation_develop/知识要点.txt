xml配置和注解配置，同时配置了相同名字的Bean时，优先使用xml配置的Bean，注解的被覆盖。



注解开发
spring原始注解：
	@Component:使用在类上，用于实例化Bean

	@Controller:使用在web层类上，用于实例化Bean
	@Service:使用在service层类上，用于实例化Bean
	@Repository:使用在dao层类上，用于实例化Bean

	@Autowired:使用在字段上，用于根据类型依赖注入(按照数据类型从Spring容器中进行匹配)
	@Qualifier:结合@Autowired一起使用，用于根据名称进行依赖注入

	@Resource:相当于@Autowired+@Qualifier，按照名称进行注入
	
	@Value:注入普通属性(@Value(${jdbc.driver})标识从容器中找然后注入)
	@Scope:标注Bean的作用范围
	
	@PostConstruct:使用在方法上，标注该方法是Bean的初始化方法
	@PreDestroy:使用在方法上，标注该方法是Bean的销毁方法
	
spring新注解：
	一般不用的（我们开发一般使用，xml配置+注解配置）
	非自定义的Bean的配置：<baan>
	加载properties文件的配置：<context:property-placeholder>
	组件扫描的配置：<context:component-scan>
	引入其他文件：<import>
	
	@Configuration：用于指定当前类是一个Spring配置类，当创建容器时从该类上加载注解
	@ComponentScan：用于指定Spring在初始化容器时要扫描的包。
		作用和xml配置中的<context:component-scan base-package="com.yrd.spring.annotation_develop"/>一样。
	@Bean：使用在方法上，标注将该方法的返回值存储到spring容器中。
	@PropertySource：用于加载properties文件中的配置
	@import：用于导入其他配置类
	
1.<!-- 注解的组件扫描 -->
<context:component-scan base-package="com.yrd.spring.annotation_develop"></context:component-scan>
	
	@Value("${jdbc.driver}")
	private String username;
	
	
2.原始Junit测试Spring的问题
	在测试类中，每个测试方法都有以下两行代码：
	ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml");
	IAccountService as = ac.getBean("accountService",IAccountService.class);
	这两行代码的作用是获取容器，如果不写的话，直接会提示空指针异常。所以又不能轻易删除。
	
	让SpringJunit负责创建Spring容器，但是需要将配置文件的名称，告诉它。
	将需要进行测试Bean直接在测试类中进行注入
	
	Spring集成Junit步骤：
		1.导入spring集成junit的坐标
		2.使用@Runwith注解替换原来的运行期
		3.使用@ContextConfiguration指定配置文件或配置类
		4.使用@Autowired注入需要测试的对象
		5.创建测试方法进行测试
	
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration("classpath:applicationContext.xml")
	@ContextConfiguration(class={SpringConfiguration.class})
	public class SpringTest {
	
		@Autowired
		private IUserService userService;
	
		public void test0() {
			userService.save();
		}
	
	}
	
	
	//<!-- 引入其他配置文件 -->,如果多个{xxx1.class,xxx2.class,xxx3.class}
	//<import resource="applicationContext-dataSource.xml" />
	@Import({DataSourceConfiguration.class})

	@ContextConfiguration(class={SpringConfiguration.class})



	
	
	
	
	
	
	
	
		
	
	
	