Aop的作用及其优势：
作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强
优势：减少重复代码，提高开发效率，并且便于维护

实际上，AOP的底层是通过Spring提供的动态代理技术实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，
代理对象方法执行时进行增强功能的介入，再去调用目标对象的方法，从而完成功能的增强。

jdk代理：基于接口的动态代理技术（目标对象---->目标接口----->代理对象，目标对象和代理对象相当于兄弟）
	缺点：必须有接口
cglib代理：基于父类的动态代理技术（目标对象---->代理对象）
	cglib包集成到了spring-core.jar包中了
	

(目标+增强=切面)

我们必须理解AOP的相关术语：
Target（目标对象）：代理的目标对象
Proxy（代理）：一个类被AOP织入增强后，就产生一个结果代理类
Joinpoint（连接点）：所谓连接点是指那些被拦截到的点。在spring中，这些点指的是方法，因为spring只支持方法类型的连接点。
	可以被增强的方法叫做连接点。
Pointcut（切入点）：所谓切入点是指我们要对哪些Joinpoint进行拦截的定义。
	通过配置，被增强的连接点叫做切入点。
Advice（通知/增强）：所谓通知是指拦截到Joinpoint之后所要做的事情，就是通知。
Aspect（切面）：是切入点和通知的结合
Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。
	spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入。

Aop开发明确的事项
1.需要编写的内容
	编写核心业务代码（目标类大的目标方法）
	编写切面类，切面类中有通知（增强功能方法）
	在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合
2.Aop技术实现的内容
	spring框架监控切入点方法的执行。一旦监控切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，
	根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。


步骤：xml方式：
	1.导入aop相关的坐标
	2.创建目标接口和目标类（内部有切点）
	3.创建切面类（内部有增强方法）
	4.将目标类和切面类的对象，创建权交给spring
	
	5.在applicationContext.xml中配置织入关系
	6.测试
	
	注解方式：
	1.导入aop相关的坐标
	2.创建目标接口和目标类（内部有切点）
	3.创建切面类（内部有增强方法）
	4.将目标类和切面类的对象，创建权交给spring
	
	5.在切面类中使用注解配置织入关系
		1.使用@Aspect标注切面类
		2.使用@通知注解标注通知方法
		3.在配置文件中配置aop自动代理<aop:aspectj-autoproxy/>
	5.在applicationContext.xml中开启组件扫描和AOP的自动代理
	6.测试
	

<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.9.6</version>
		</dependency>


<aop:config>
		<!-- 声明切面 -->
		<aop:aspect ref="切面类">
			<aop:around method="通知方法名称" pointcut="切点表达式" />
			
			<!--切点表达式:execution(* com.yrd.spring.aop_xml.aop_aspectj.*.*(..))-->
			<!-- 抽取切点表达式 -->
			<aop:pointcut
				expression="execution(* com.yrd.spring.aop_xml.aop_aspectj.*.*(..))"
				id="myPointcut" />
			<aop:around method="通知方法名称" pointcut-ref="myPointcut" />
			
			
		</aop:aspect>
	</aop:config>





